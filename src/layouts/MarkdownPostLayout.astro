---
import BaseLayout from "./BaseLayout.astro";
const { frontmatter, body } = Astro.props;
// import CtaTwo from "../components/cta/CtaTwo.astro";
import { AstroSeo } from "@astrolib/seo";
import { format } from "date-fns";
import { Image } from 'astro:assets'
import readingTime from "reading-time";

const stats = body ? readingTime(body) : {};
---

<AstroSeo
  title={frontmatter.title}
  description={frontmatter.description}
  canonical={frontmatter.canonical || Astro.url.toString()}
  openGraph={{
    url: Astro.url.toString(),
    title: frontmatter.title,
    description: frontmatter.description,
    images: [
      {
        url: new URL(Astro.url.pathname + "og.png", Astro.site).toString(),
        width: 1200,
        height: 630,
        alt: "Social open graph",
        type: "image/jpeg",
      },
      {
        url: new URL(Astro.url.pathname + "og.png", Astro.site).toString(),
        width: 4096,
        height: 4096,
        alt: "Twitter open graph",
        type: "image/jpeg",
      },
      { url: new URL(Astro.url.pathname + "og.png", Astro.site).toString() },
      { url: new URL(Astro.url.pathname + "og.png", Astro.site).toString() },
    ],
    site_name: "Darko's Corner",
  }}
  twitter={{
    handle: "@d_bozhinovski",
    site: Astro.url.toString(),
    cardType: "summary_large_image",
  }}
/>
<BaseLayout>
  <section aria-labelledby="your-label" id="your-id">
    <div id="js-toc"></div>
    <div class="max-w-7xl mx-auto px-8 py-12 lg:px-24">
      <div>
        <h1 class="font-black text-black text-3xl lg:text-6xl text-center font-sans" transition:name=`title-${frontmatter.title}`>
          {frontmatter.title}
        </h1>
      </div>
      <div class="max-w-3xl mx-auto mt-24 text-center">
        <p class="text-neutral-500 font-serif text-2xl mx-auto" transition:name=`description-${frontmatter.title}`>
          <em>{frontmatter.description}</em>
        </p>
        {
          frontmatter.pubDate && (
            <div transition:animate="fade">
              <ol
                role="list"
                class="mt-8 divide-y divide-neutral-300/30 text-base tracking-tight"
              >
                <>
                  <li
                    class="flex justify-between flex-col md:flex-row py-3"
                    aria-label="Getting started on page 1"
                  >
                    <>
                    <span class="font-light text-black flex gap-2 justify-center itemst-center" aria-hidden="true">
                      <svg width="18" height="18" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path fill="currentColor" d="M12 12h5v5h-5v-5m7-9h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 2v2H5V5h14M5 19V9h14v10H5Z"/>
  </svg>
                         Publish date
                      </span>
                      <span
                        class="font-serif text-neutral-800"
                        aria-hidden="true"
                      >
                        {frontmatter.pubDate &&
                          format(frontmatter.pubDate, "yyyy-MM-dd")}
                      </span>
                    </>
                  </li>
                 { body && <li
                    class="flex justify-between flex-col md:flex-row py-3"
                    aria-label="Intro to Figma on page 15"
                  >
                    <>
                      <span class="font-light text-black flex gap-2 justify-center items-center" aria-hidden="true">
                        <svg width="18" height="18" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <g fill="none">
        <path d="M24 0v24H0V0h24ZM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01l-.184-.092Z"/>
        <path fill="currentColor" d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12S6.477 2 12 2Zm0 2a8 8 0 1 0 0 16a8 8 0 0 0 0-16Zm0 2a1 1 0 0 1 .993.883L13 7v4.586l2.707 2.707a1 1 0 0 1-1.32 1.497l-.094-.083l-3-3a1 1 0 0 1-.284-.576L11 12V7a1 1 0 0 1 1-1Z"/>
    </g>
</svg>

                        Reading time
                      </span>
                      <span
                        class="font-serif text-neutral-800"
                        aria-hidden="true"
                      >
                        {stats.text}
                      </span>
                    </>
                  </li>
                </>}
                <li
                  class="flex justify-between flex-col md:flex-row py-3"
                  aria-label="Setting up your first artboard on page 20"
                >
                  <>
                    <span class="font-light text-black flex gap-2 justify-center items-center" aria-hidden="true">
                      <svg width="18" height="18" viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg">
    <path fill="currentColor" d="m246.15 133.18l-99.32-99.32A19.85 19.85 0 0 0 132.69 28H40a12 12 0 0 0-12 12v92.69a19.85 19.85 0 0 0 5.86 14.14l99.32 99.32a20 20 0 0 0 28.28 0l84.69-84.69a20 20 0 0 0 0-28.28Zm-98.83 93.17L52 131V52h79l95.32 95.32ZM100 84a16 16 0 1 1-16-16a16 16 0 0 1 16 16Z"/>
</svg>

                      Categories
                    </span>
                    <span
                      class="font-serif text-blue-500 underline gap-1 flex-wrap flex items-center justify-center items-center"
                      aria-hidden="true"
                    >
                      {frontmatter?.tags?.map((tag) => (
                        <>
                          <a class="px-1" href={`/tags/${tag}`}>
                            #{tag}
                          </a>
                        </>
                      ))}
                    </span>
                  </>
                </li>
              </ol>
            </div>
          )
        }
      </div>
      {
        frontmatter.ogImage && (
          <Image src={frontmatter.ogImage} alt="hero image" width="1088" height="500" class="mt-8 w-full max-h-[500px] object-cover" transition:name={`image-${frontmatter.ogImage}`} />
        )
      }
    </div>
  </section>
  <section aria-labelledby="" id="content" transition:animate="fade">
    <div class="max-w-7xl mx-auto px-8 pb-16 pt-2 lg:px-24">
      <div
        class="mx-auto hover:prose-a:text-black lg:prose-xl prose prose-a:text-blue-500 prose-blockquote:border-l-black prose-blockquote:text-black prose-bloquote:text-5xl prose-headings:font-medium prose-headings:text-black prose-li:marker:text-black text-neutral-600 py-10 prose-pre:border prose-img:w-full font-serif relative"
      >
        <slot />
        <button class="toc-button">
          <svg width="24" height="24" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
              <path fill="currentColor" d="M4 6h18v2H4zm0 6h18v2H4zm0 6h18v2H4zm0 6h18v2H4zM26 6h2v2h-2zm0 6h2v2h-2zm0 6h2v2h-2zm0 6h2v2h-2z"/>
          </svg>  
        </button>
      </div>
    </div>
  </section>
  <!-- <CtaTwo /> -->

</BaseLayout>

<script>import toc from "@jsdevtools/rehype-toc";

  let observer;
  let headingsObserver;

  function toggleToC() {
    const toc = document.querySelector('.toc') as HTMLElement;
    if (toc) {
      if (toc.style.opacity === '1') {
        toc.style.display = 'none';
        toc.style.opacity = '0';
      } else {
        toc.style.display = 'block';
        toc.style.opacity = '1';
      }
    }
  }

  function bindToggleToC () {
    document.querySelector('.toc-button')?.removeEventListener('click', toggleToC);
    document.querySelector('.toc-button')?.addEventListener('click', toggleToC);
  }

  function observeToC() {
    observer?.unobserve(document?.querySelector("#content > div"));

    observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        const toc = document.querySelector('.toc') as HTMLElement;
        if (toc) {
          if (entry.isIntersecting) {
            console.log('show')
            toc.style.opacity = '1';
          } else {
            console.log('hide' )
            toc.style.opacity = '0';
          }
        }
      });
    });
    
    observer.observe(document?.querySelector("#content > div"));
  }

  function observeHeadings () {
    const headings = document.querySelectorAll("h1, h2");

    headings.forEach(heading => {
      const hObserver = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            console.log('Adding active to', heading.id)
            document.querySelectorAll('.toc a').forEach(link => {
              link.classList.remove('active');
            });
            const tocLink = document.querySelector(`.toc a[href="#${heading.id}"]`) as HTMLElement;
            tocLink?.classList.add('active');
          }
        });
      });

      hObserver.observe(heading);
    });
  }

  document.addEventListener('astro:after-swap', () => {
    console.log('refreshing observer');
    observeToC();
    bindToggleToC();
    observeHeadings();
    // observeToCHeadings();
  });

  document.addEventListener('astro:page-load', () => {
    console.log('refreshing observer');
    observeToC();
    bindToggleToC();
    observeHeadings();
    // observeToCHeadings();
  }, { once: true });

</script>